plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("java-library")
    id("io.papermc.paperweight.userdev") version "1.3.3"
    id("xyz.jpenilla.run-paper") version "1.0.6" // Adds runServer and runMojangMappedServer tasks for testing
    id("net.minecrell.plugin-yml.bukkit") version "0.5.1" // Generates plugin.yml
}

import net.minecrell.pluginyml.bukkit.BukkitPluginDescription
import java.nio.charset.StandardCharsets

repositories {
    gradlePluginPortal()
    maven { url = uri("https://libraries.minecraft.net/") }
    maven { url = uri("https://maven.fabricmc.net/") }
    maven { url = uri("https://papermc.io/repo/repository/maven-public/") }
    maven { url = uri("https://repo.kenzie.mx/releases") }
}

// ============ change these here ============ //
group = 'blue.lhf'
version = '0.1.0'

def author = 'bluelhf'
def javaVersion = 17
def charset = StandardCharsets.UTF_8

def ver = [
        major   : "1",
        minor   : "18",
        patch   : "2",
        revision: "0.1",
        tag     : "SNAPSHOT"
]
// ============ change these here ============ //

jar.archiveFileName = "${project.name.toLowerCase()}.${jar.archiveExtension.get()}"


java {
    // Configure the java toolchain. This allows gradle to auto-provision JDK 17 on systems that only have JDK 8 installed for example.
    toolchain.languageVersion.set(JavaLanguageVersion.of(javaVersion))
}

configurations {
    extraLibs
    implementation {
        extendsFrom extraLibs
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    extraLibs "org.byteskript:byteskript:1.0.20"

    paperweightDevelopmentBundle("io.papermc.paper:dev-bundle:${ver.major}.${ver.minor}.${ver.patch}-R${ver.revision}-${ver.tag}");
}

test {
    useJUnitPlatform()
    testLogging { // Allow printing in tests
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}

jar {
    from {
        duplicatesStrategy DuplicatesStrategy.EXCLUDE

        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }

}
tasks {
    assemble { // Invoke reobfJar when building
        dependsOn(reobfJar)
    }

    compileJava.options.release.set(javaVersion)

    javadoc.options.encoding = charset.name()
    compileJava.options.encoding = charset.name()
    processResources.filteringCharset = charset.name()
}

bukkit {
    load = BukkitPluginDescription.PluginLoadOrder.POSTWORLD
    main = "${group}.${project.name.toLowerCase()}.BSFP"
    apiVersion = "${ver.major}.${ver.minor}"
    authors = [author]
}